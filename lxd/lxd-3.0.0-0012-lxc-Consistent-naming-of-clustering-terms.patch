commit 106229196cf149f35e0e6bb6b283ae024e949fb4
Author: Stéphane Graber <stgraber@ubuntu.com>
Date:   Mon Apr 2 19:23:01 2018 -0400

    lxc: Consistent naming of clustering terms
    
    Signed-off-by: Stéphane Graber <stgraber@ubuntu.com>

diff --git a/lxc/cluster.go b/lxc/cluster.go
index fb86c209..da3e50b6 100644
--- a/lxc/cluster.go
+++ b/lxc/cluster.go
@@ -218,7 +218,7 @@ func (c *cmdClusterRename) Run(cmd *cobra.Command, args []string) error {
 		return err
 	}
 
-	fmt.Printf(i18n.G("Node %s renamed to %s")+"\n", resource.name, args[1])
+	fmt.Printf(i18n.G("Member %s renamed to %s")+"\n", resource.name, args[1])
 	return nil
 }
 
@@ -265,6 +265,6 @@ func (c *cmdClusterRemove) Run(cmd *cobra.Command, args []string) error {
 		return err
 	}
 
-	fmt.Printf(i18n.G("Node %s removed")+"\n", resource.name)
+	fmt.Printf(i18n.G("Member %s removed")+"\n", resource.name)
 	return nil
 }
diff --git a/lxc/copy.go b/lxc/copy.go
index 043548c3..6ad33550 100644
--- a/lxc/copy.go
+++ b/lxc/copy.go
@@ -42,7 +42,7 @@ func (c *cmdCopy) Command() *cobra.Command {
 	cmd.Flags().StringVar(&c.flagMode, "mode", "pull", i18n.G("Transfer mode. One of pull (default), push or relay")+"``")
 	cmd.Flags().BoolVar(&c.flagContainerOnly, "container-only", false, i18n.G("Copy the container without its snapshots"))
 	cmd.Flags().BoolVar(&c.flagStateless, "stateless", false, i18n.G("Copy a stateful container stateless"))
-	cmd.Flags().StringVar(&c.flagTarget, "target", "", i18n.G("Node name")+"``")
+	cmd.Flags().StringVar(&c.flagTarget, "target", "", i18n.G("Cluster member name")+"``")
 	cmd.Flags().BoolVar(&c.flagNoProfiles, "no-profiles", false, "Create the container with no profiles applied")
 
 	return cmd
@@ -63,7 +63,7 @@ func (c *cmdCopy) copyContainer(conf *config.Config, sourceResource string,
 		return err
 	}
 
-	// Target node and destination remote can't be used together.
+	// Target member and destination remote can't be used together.
 	if c.flagTarget != "" && sourceRemote != destRemote {
 		return fmt.Errorf(i18n.G("You must use the same source and destination remote when using --target"))
 	}
diff --git a/lxc/init.go b/lxc/init.go
index 6e86b0bb..4c965c59 100644
--- a/lxc/init.go
+++ b/lxc/init.go
@@ -45,7 +45,7 @@ func (c *cmdInit) Command() *cobra.Command {
 	cmd.Flags().StringVarP(&c.flagNetwork, "network", "n", "", i18n.G("Network name")+"``")
 	cmd.Flags().StringVarP(&c.flagStorage, "storage", "s", "", i18n.G("Storage pool name")+"``")
 	cmd.Flags().StringVarP(&c.flagType, "type", "t", "", i18n.G("Instance type")+"``")
-	cmd.Flags().StringVar(&c.flagTarget, "target", "", i18n.G("Node name")+"``")
+	cmd.Flags().StringVar(&c.flagTarget, "target", "", i18n.G("Cluster member name")+"``")
 
 	return cmd
 }
diff --git a/lxc/list.go b/lxc/list.go
index 427db3fd..a4d590bf 100644
--- a/lxc/list.go
+++ b/lxc/list.go
@@ -90,7 +90,7 @@ Pre-defined column shorthand chars:
   s - State
   S - Number of snapshots
   t - Type (persistent or ephemeral)
-  L - Location of the container (e.g. its node)
+  L - Location of the container (e.g. its cluster member)
 
 Custom columns are defined with "key[:name][:maxWidth]":
   KEY: The (extended) config key to display
diff --git a/lxc/move.go b/lxc/move.go
index 80f258bc..b2e513cb 100644
--- a/lxc/move.go
+++ b/lxc/move.go
@@ -44,7 +44,7 @@ lxc move <container>/<old snapshot name> <container>/<new snapshot name>
 	cmd.Flags().BoolVar(&c.flagContainerOnly, "container-only", false, i18n.G("Move the container without its snapshots"))
 	cmd.Flags().StringVar(&c.flagMode, "mode", "pull", i18n.G("Transfer mode. One of pull (default), push or relay.")+"``")
 	cmd.Flags().BoolVar(&c.flagStateless, "stateless", false, i18n.G("Copy a stateful container stateless"))
-	cmd.Flags().StringVar(&c.flagTarget, "target", "", i18n.G("Node name")+"``")
+	cmd.Flags().StringVar(&c.flagTarget, "target", "", i18n.G("Cluster member name")+"``")
 
 	return cmd
 }
@@ -86,7 +86,7 @@ func (c *cmdMove) Run(cmd *cobra.Command, args []string) error {
 		}
 	}
 
-	// Target node and destination remote can't be used together.
+	// Target member and destination remote can't be used together.
 	if c.flagTarget != "" && sourceRemote != destRemote {
 		return fmt.Errorf(i18n.G("You must use the same source and destination remote when using --target"))
 	}
@@ -131,7 +131,7 @@ func (c *cmdMove) Run(cmd *cobra.Command, args []string) error {
 	}
 
 	// If the target option was specified, we're moving a container from a
-	// cluster node to another. In case the rootfs of the container is
+	// cluster member to another. In case the rootfs of the container is
 	// backed by ceph, we want to re-use the same ceph volume. This assumes
 	// that the container is not running.
 	if c.flagTarget != "" {
@@ -162,7 +162,7 @@ func (c *cmdMove) Run(cmd *cobra.Command, args []string) error {
 }
 
 // Helper to check if the container to be moved is backed by a ceph storage
-// pool, and use the special POST /containers/<name>?target=<node> API if so.
+// pool, and use the special POST /containers/<name>?target=<member> API if so.
 //
 // It returns false if the container is not backed by ceph, true otherwise.
 func maybeMoveCephContainer(conf *config.Config, sourceResource, destResource, target string) (bool, error) {
@@ -202,7 +202,7 @@ func maybeMoveCephContainer(conf *config.Config, sourceResource, destResource, t
 	// Check if the container to be moved is backed by ceph.
 	container, _, err := source.GetContainer(sourceName)
 	if err != nil {
-		// If we are unable to connect, we assume that the source node
+		// If we are unable to connect, we assume that the source member
 		// is offline, and we'll try to perform the migration. If the
 		// container turns out to not be backed by ceph, the migrate
 		// API will still return an error.
diff --git a/lxc/network.go b/lxc/network.go
index 5779b35b..c58bc2b0 100644
--- a/lxc/network.go
+++ b/lxc/network.go
@@ -286,7 +286,7 @@ func (c *cmdNetworkCreate) Run(cmd *cobra.Command, args []string) error {
 		network.Config[entry[0]] = entry[1]
 	}
 
-	// If a target node was specified the API won't actually create the
+	// If a target member was specified the API won't actually create the
 	// network, but only define it as pending in the database.
 	if c.network.flagTarget != "" {
 		client = client.UseTarget(c.network.flagTarget)
@@ -298,7 +298,7 @@ func (c *cmdNetworkCreate) Run(cmd *cobra.Command, args []string) error {
 	}
 
 	if c.network.flagTarget != "" {
-		fmt.Printf(i18n.G("Network %s pending on node %s")+"\n", resource.name, c.network.flagTarget)
+		fmt.Printf(i18n.G("Network %s pending on member %s")+"\n", resource.name, c.network.flagTarget)
 	} else {
 		fmt.Printf(i18n.G("Network %s created")+"\n", resource.name)
 	}
diff --git a/lxc/storage.go b/lxc/storage.go
index 555632cf..96e894a4 100644
--- a/lxc/storage.go
+++ b/lxc/storage.go
@@ -126,7 +126,7 @@ func (c *cmdStorageCreate) Run(cmd *cobra.Command, args []string) error {
 		pool.Config[entry[0]] = entry[1]
 	}
 
-	// If a target node was specified the API won't actually create the
+	// If a target member was specified the API won't actually create the
 	// pool, but only define it as pending in the database.
 	if c.storage.flagTarget != "" {
 		client = client.UseTarget(c.storage.flagTarget)
@@ -139,7 +139,7 @@ func (c *cmdStorageCreate) Run(cmd *cobra.Command, args []string) error {
 	}
 
 	if c.storage.flagTarget != "" {
-		fmt.Printf(i18n.G("Storage pool %s pending on node %s")+"\n", resource.name, c.storage.flagTarget)
+		fmt.Printf(i18n.G("Storage pool %s pending on member %s")+"\n", resource.name, c.storage.flagTarget)
 	} else {
 		fmt.Printf(i18n.G("Storage pool %s created")+"\n", resource.name)
 	}
@@ -677,7 +677,7 @@ func (c *cmdStorageShow) Run(cmd *cobra.Command, args []string) error {
 		return fmt.Errorf(i18n.G("Missing pool name"))
 	}
 
-	// If a target node was specified, we return also node-specific config values.
+	// If a target member was specified, we return also member-specific config values.
 	if c.storage.flagTarget != "" {
 		client = client.UseTarget(c.storage.flagTarget)
 	}
diff --git a/lxc/storage_volume.go b/lxc/storage_volume.go
index 13f0166c..763ed2fd 100644
--- a/lxc/storage_volume.go
+++ b/lxc/storage_volume.go
@@ -471,7 +471,7 @@ func (c *cmdStorageVolumeCreate) Run(cmd *cobra.Command, args []string) error {
 		vol.Config[entry[0]] = entry[1]
 	}
 
-	// If a target was specified, create the volume on the given node.
+	// If a target was specified, create the volume on the given member.
 	if c.storage.flagTarget != "" {
 		client = client.UseTarget(c.storage.flagTarget)
 	}
@@ -531,7 +531,7 @@ func (c *cmdStorageVolumeDelete) Run(cmd *cobra.Command, args []string) error {
 	// Parse the input
 	volName, volType := c.storageVolume.parseVolume("custom", args[1])
 
-	// If a target was specified, create the volume on the given node.
+	// If a target was specified, create the volume on the given member.
 	if c.storage.flagTarget != "" {
 		client = client.UseTarget(c.storage.flagTarget)
 	}
@@ -787,7 +787,7 @@ func (c *cmdStorageVolumeEdit) Run(cmd *cobra.Command, args []string) error {
 		return client.UpdateStoragePoolVolume(resource.name, volType, volName, newdata, "")
 	}
 
-	// If a target was specified, create the volume on the given node.
+	// If a target was specified, create the volume on the given member.
 	if c.storage.flagTarget != "" {
 		client = client.UseTarget(c.storage.flagTarget)
 	}
@@ -883,7 +883,7 @@ func (c *cmdStorageVolumeGet) Run(cmd *cobra.Command, args []string) error {
 	// Parse input
 	volName, volType := c.storageVolume.parseVolume("custom", args[1])
 
-	// If a target was specified, create the volume on the given node.
+	// If a target was specified, create the volume on the given member.
 	if c.storage.flagTarget != "" {
 		client = client.UseTarget(c.storage.flagTarget)
 	}
@@ -968,7 +968,7 @@ func (c *cmdStorageVolumeList) Run(cmd *cobra.Command, args []string) error {
 		i18n.G("USED BY"),
 	}
 	if resource.server.IsClustered() {
-		header = append(header, i18n.G("NODE"))
+		header = append(header, i18n.G("LOCATION"))
 	}
 	table.SetHeader(header)
 	sort.Sort(byNameAndType(data))
@@ -1059,8 +1059,8 @@ func (c *cmdStorageVolumeRename) Run(cmd *cobra.Command, args []string) error {
 	vol := api.StorageVolumePost{}
 	vol.Name = args[2]
 
-	// If a target node was specified, get the volume with the matching
-	// name on that node, if any.
+	// If a target member was specified, get the volume with the matching
+	// name on that member, if any.
 	if c.storage.flagTarget != "" {
 		client = client.UseTarget(c.storage.flagTarget)
 	}
@@ -1119,7 +1119,7 @@ func (c *cmdStorageVolumeSet) Run(cmd *cobra.Command, args []string) error {
 	// Parse the input
 	volName, volType := c.storageVolume.parseVolume("custom", args[1])
 
-	// If a target was specified, create the volume on the given node.
+	// If a target was specified, create the volume on the given member.
 	if c.storage.flagTarget != "" {
 		client = client.UseTarget(c.storage.flagTarget)
 	}
@@ -1202,8 +1202,8 @@ func (c *cmdStorageVolumeShow) Run(cmd *cobra.Command, args []string) error {
 	// Parse the input
 	volName, volType := c.storageVolume.parseVolume("custom", args[1])
 
-	// If a target node was specified, get the volume with the matching
-	// name on that node, if any.
+	// If a target member was specified, get the volume with the matching
+	// name on that member, if any.
 	if c.storage.flagTarget != "" {
 		client = client.UseTarget(c.storage.flagTarget)
 	}
