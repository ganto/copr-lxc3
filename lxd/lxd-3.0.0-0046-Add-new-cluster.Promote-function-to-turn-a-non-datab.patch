commit e44fc1e7a589df9610185a0bce37f65e7c6c0b64
Author: Free Ekanayaka <free.ekanayaka@canonical.com>
Date:   Mon Apr 16 10:44:46 2018 +0000

    Add new cluster.Promote function to turn a non-database node into a database one
    
    Signed-off-by: Free Ekanayaka <free.ekanayaka@canonical.com>

diff --git a/lxd/api_cluster.go b/lxd/api_cluster.go
index 2c1327f6..8fb21efe 100644
--- a/lxd/api_cluster.go
+++ b/lxd/api_cluster.go
@@ -441,7 +441,7 @@ func clusterNodeDelete(d *Daemon, r *http.Request) Response {
 	// First check that the node is clear from containers and images and
 	// make it leave the database cluster, if it's part of it.
 	name := mux.Vars(r)["name"]
-	address, err := cluster.Leave(d.State(), d.gateway, name, force == 1)
+	address, _, err := cluster.Leave(d.State(), d.gateway, name, force == 1)
 	if err != nil {
 		return SmartError(err)
 	}
diff --git a/lxd/cluster/gateway.go b/lxd/cluster/gateway.go
index e0ffce29..07546c17 100644
--- a/lxd/cluster/gateway.go
+++ b/lxd/cluster/gateway.go
@@ -217,6 +217,11 @@ func (g *Gateway) WaitUpgradeNotification() {
 	<-g.upgradeCh
 }
 
+// IsDatabaseNode returns true if this gateway also run acts a raft database node.
+func (g *Gateway) IsDatabaseNode() bool {
+	return g.raft != nil
+}
+
 // Dialer returns a gRPC dial function that can be used to connect to one of
 // the dqlite nodes via gRPC.
 func (g *Gateway) Dialer() grpcsql.Dialer {
diff --git a/lxd/cluster/membership.go b/lxd/cluster/membership.go
index 33ae6912..b21c87d0 100644
--- a/lxd/cluster/membership.go
+++ b/lxd/cluster/membership.go
@@ -7,8 +7,8 @@ import (
 	"strconv"
 	"time"
 
-	"github.com/CanonicalLtd/raft-http"
-	"github.com/CanonicalLtd/raft-membership"
+	rafthttp "github.com/CanonicalLtd/raft-http"
+	raftmembership "github.com/CanonicalLtd/raft-membership"
 	"github.com/hashicorp/raft"
 	"github.com/lxc/lxd/lxd/db"
 	"github.com/lxc/lxd/lxd/db/cluster"
@@ -432,6 +432,111 @@ func Join(state *state.State, gateway *Gateway, cert *shared.CertInfo, name stri
 	return nil
 }
 
+// Promote makes a LXD node which is not a database node, become part of the
+// raft cluster.
+func Promote(state *state.State, gateway *Gateway, nodes []db.RaftNode) error {
+	logger.Info("Promote node to database node")
+
+	// Sanity check that this is not already a database node
+	if gateway.IsDatabaseNode() {
+		return fmt.Errorf("this node is already a database node")
+	}
+
+	// Figure out our own address.
+	address := ""
+	err := state.Cluster.Transaction(func(tx *db.ClusterTx) error {
+		var err error
+		address, err = tx.NodeAddress()
+		if err != nil {
+			return errors.Wrap(err, "failed to fetch the address of this node")
+		}
+		return nil
+	})
+	if err != nil {
+		return err
+	}
+
+	// Sanity check that we actually have an address.
+	if address == "" {
+		return fmt.Errorf("node is not exposed on the network")
+	}
+
+	// Figure out our raft node ID, and an existing target raft node that
+	// we'll contact to add ourselves as member.
+	id := ""
+	target := ""
+	for _, node := range nodes {
+		if node.Address == address {
+			id = strconv.Itoa(int(node.ID))
+		} else {
+			target = node.Address
+		}
+	}
+
+	// Sanity check that our address was actually included in the given
+	// list of raft nodes.
+	if id == "" {
+		return fmt.Errorf("this node is not included in the given list of database nodes")
+	}
+
+	// Replace our local list of raft nodes with the given one (which
+	// includes ourselves). This will make the gateway start a raft node
+	// when restarted.
+	err = state.Node.Transaction(func(tx *db.NodeTx) error {
+		err = tx.RaftNodesReplace(nodes)
+		if err != nil {
+			return errors.Wrap(err, "failed to set raft nodes")
+		}
+
+		return nil
+	})
+	if err != nil {
+		return err
+	}
+
+	// Lock regular access to the cluster database since we don't want any
+	// other database code to run while we're reconfiguring raft.
+	err = state.Cluster.EnterExclusive()
+	if err != nil {
+		return errors.Wrap(err, "failed to acquire cluster database lock")
+	}
+
+	// Wipe all existing raft data, for good measure (perhaps they were
+	// somehow leftover).
+	err = os.RemoveAll(filepath.Join(state.OS.VarDir, "raft"))
+	if err != nil {
+		return errors.Wrap(err, "failed to remove existing raft data")
+	}
+
+	// Re-initialize the gateway. This will create a new raft factory an
+	// dqlite driver instance, which will be exposed over gRPC by the
+	// gateway handlers.
+	err = gateway.init()
+	if err != nil {
+		return errors.Wrap(err, "failed to re-initialize gRPC SQL gateway")
+	}
+
+	logger.Info(
+		"Joining dqlite raft cluster",
+		log15.Ctx{"id": id, "address": address, "target": target})
+	changer := gateway.raft.MembershipChanger()
+	err = changer.Join(raft.ServerID(id), raft.ServerAddress(target), 5*time.Second)
+	if err != nil {
+		return err
+	}
+
+	// Unlock regular access to our cluster database, and make sure our
+	// gateway still works correctly.
+	err = state.Cluster.ExitExclusive(func(tx *db.ClusterTx) error {
+		_, err := tx.Nodes()
+		return err
+	})
+	if err != nil {
+		return errors.Wrap(err, "cluster database initialization failed")
+	}
+	return nil
+}
+
 // Leave a cluster.
 //
 // If the force flag is true, the node will leave even if it still has
@@ -469,19 +574,17 @@ func Leave(state *state.State, gateway *Gateway, name string, force bool) (strin
 	}
 
 	// If the node is a database node, leave the raft cluster too.
-	id := ""
-	target := ""
+	var raftNodes []db.RaftNode // Current raft nodes
+	raftNodeRemoveIndex := -1   // Index of the raft node to remove, if any.
 	err = state.Node.Transaction(func(tx *db.NodeTx) error {
-		nodes, err := tx.RaftNodes()
+		var err error
+		raftNodes, err = tx.RaftNodes()
 		if err != nil {
-			return err
+			return errors.Wrap(err, "failed to get current database nodes")
 		}
-		for i, node := range nodes {
+		for i, node := range raftNodes {
 			if node.Address == address {
-				id = strconv.Itoa(int(node.ID))
-				// Save the address of another database node,
-				// we'll use it to leave the raft cluster.
-				target = nodes[(i+1)%len(nodes)].Address
+				raftNodeRemoveIndex = i
 				break
 			}
 		}
@@ -491,22 +594,28 @@ func Leave(state *state.State, gateway *Gateway, name string, force bool) (strin
 		return "", err
 	}
 
-	if target != "" {
-		logger.Info(
-			"Remove node from dqlite raft cluster",
-			log15.Ctx{"id": id, "address": address, "target": target})
-		dial, err := raftDial(gateway.cert)
-		if err != nil {
-			return "", err
-		}
-		err = rafthttp.ChangeMembership(
-			raftmembership.LeaveRequest, raftEndpoint, dial,
-			raft.ServerID(id), address, target, 5*time.Second)
-		if err != nil {
-			return "", err
-		}
+	if raftNodeRemoveIndex == -1 {
+		// The node was not part of the raft cluster, nothing left to
+		// do.
+		return address, nil
 	}
 
+	id := strconv.Itoa(int(raftNodes[raftNodeRemoveIndex].ID))
+	// Get the address of another database node,
+	target := raftNodes[(raftNodeRemoveIndex+1)%len(raftNodes)].Address
+	logger.Info(
+		"Remove node from dqlite raft cluster",
+		log15.Ctx{"id": id, "address": address, "target": target})
+	dial, err := raftDial(gateway.cert)
+	if err != nil {
+		return "", err
+	}
+	err = rafthttp.ChangeMembership(
+		raftmembership.LeaveRequest, raftEndpoint, dial,
+		raft.ServerID(id), address, target, 5*time.Second)
+	if err != nil {
+		return "", err
+	}
 	return address, nil
 }
 
diff --git a/lxd/cluster/membership_test.go b/lxd/cluster/membership_test.go
index b9907cfd..5c260841 100644
--- a/lxd/cluster/membership_test.go
+++ b/lxd/cluster/membership_test.go
@@ -348,6 +348,83 @@ func TestJoin(t *testing.T) {
 	assert.Equal(t, 1, count)
 }
 
+func TestPromote(t *testing.T) {
+	// Setup a target node running as leader of a cluster.
+	targetCert := shared.TestingKeyPair()
+	targetMux := http.NewServeMux()
+	targetServer := newServer(targetCert, targetMux)
+	defer targetServer.Close()
+
+	targetState, cleanup := state.NewTestState(t)
+	defer cleanup()
+
+	targetGateway := newGateway(t, targetState.Node, targetCert)
+	defer targetGateway.Shutdown()
+
+	for path, handler := range targetGateway.HandlerFuncs() {
+		targetMux.HandleFunc(path, handler)
+	}
+
+	targetAddress := targetServer.Listener.Addr().String()
+	var err error
+	require.NoError(t, targetState.Cluster.Close())
+	targetState.Cluster, err = db.OpenCluster("db.bin", targetGateway.Dialer(), targetAddress)
+	require.NoError(t, err)
+	targetF := &membershipFixtures{t: t, state: targetState}
+	targetF.NetworkAddress(targetAddress)
+
+	err = cluster.Bootstrap(targetState, targetGateway, "buzz")
+	require.NoError(t, err)
+
+	// Setup a node to be promoted.
+	mux := http.NewServeMux()
+	server := newServer(targetCert, mux) // Use the same cert, as we're already part of the cluster
+	defer server.Close()
+
+	state, cleanup := state.NewTestState(t)
+	defer cleanup()
+
+	address := server.Listener.Addr().String()
+	targetF.ClusterNode(address) // Add the non database node to the cluster database
+	f := &membershipFixtures{t: t, state: state}
+	f.NetworkAddress(address)
+	f.RaftNode(targetAddress) // Insert the leader in our local list of database nodes
+
+	gateway := newGateway(t, state.Node, targetCert)
+	defer gateway.Shutdown()
+
+	for path, handler := range gateway.HandlerFuncs() {
+		mux.HandleFunc(path, handler)
+	}
+
+	state.Cluster, err = db.OpenCluster("db.bin", gateway.Dialer(), address)
+	require.NoError(t, err)
+
+	// Promote the node.
+	targetF.RaftNode(address) // Add the address of the node to be promoted in the leader's db
+	raftNodes := targetF.RaftNodes()
+	err = cluster.Promote(state, gateway, raftNodes)
+	require.NoError(t, err)
+
+	// The leader now returns an updated list of raft nodes.
+	raftNodes, err = targetGateway.RaftNodes()
+	require.NoError(t, err)
+	assert.Len(t, raftNodes, 2)
+	assert.Equal(t, int64(1), raftNodes[0].ID)
+	assert.Equal(t, targetAddress, raftNodes[0].Address)
+	assert.Equal(t, int64(2), raftNodes[1].ID)
+	assert.Equal(t, address, raftNodes[1].Address)
+
+	// The List function returns all nodes in the cluster.
+	nodes, err := cluster.List(state)
+	require.NoError(t, err)
+	assert.Len(t, nodes, 2)
+	assert.Equal(t, "Online", nodes[0].Status)
+	assert.Equal(t, "Online", nodes[1].Status)
+	assert.True(t, nodes[0].Database)
+	assert.True(t, nodes[1].Database)
+}
+
 // Helper for setting fixtures for Bootstrap tests.
 type membershipFixtures struct {
 	t     *testing.T
@@ -374,6 +451,18 @@ func (h *membershipFixtures) RaftNode(address string) {
 	require.NoError(h.t, err)
 }
 
+// Get the current list of the raft nodes in the raft_nodes table.
+func (h *membershipFixtures) RaftNodes() []db.RaftNode {
+	var nodes []db.RaftNode
+	err := h.state.Node.Transaction(func(tx *db.NodeTx) error {
+		var err error
+		nodes, err = tx.RaftNodes()
+		return err
+	})
+	require.NoError(h.t, err)
+	return nodes
+}
+
 // Add the given address to the nodes table of the cluster database.
 func (h *membershipFixtures) ClusterNode(address string) {
 	err := h.state.Cluster.Transaction(func(tx *db.ClusterTx) error {
diff --git a/lxd/db/cluster/open.go b/lxd/db/cluster/open.go
index 0ca5d50a..498e5d92 100644
--- a/lxd/db/cluster/open.go
+++ b/lxd/db/cluster/open.go
@@ -74,7 +74,7 @@ func EnsureSchema(db *sql.DB, address string) (bool, error) {
 		// Update the schema and api_extension columns of ourselves.
 		err = updateNodeVersion(tx, address, apiExtensions)
 		if err != nil {
-			return err
+			return errors.Wrap(err, "failed to update node version info")
 		}
 
 		err = checkClusterIsUpgradable(tx, [2]int{len(updates), apiExtensions})
