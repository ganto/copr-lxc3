commit c8b4fae432d08500cf1c3d62ae4bda3bb4baf276
Author: Stéphane Graber <stgraber@ubuntu.com>
Date:   Mon Apr 9 02:49:34 2018 +0200

    client: Introduce LXD_SOCKET
    
    LXD_SOCKET overrides whatever socket path would normally be used.
    
    Closes #4422
    
    Signed-off-by: Stéphane Graber <stgraber@ubuntu.com>

diff --git a/client/connection.go b/client/connection.go
index 27d64b7b..a2ebbdc5 100644
--- a/client/connection.go
+++ b/client/connection.go
@@ -65,8 +65,9 @@ func ConnectLXD(url string, args *ConnectionArgs) (ContainerServer, error) {
 
 // ConnectLXDUnix lets you connect to a remote LXD daemon over a local unix socket.
 //
-// If the path argument is empty, then $LXD_DIR/unix.socket will be used.
-// If that one isn't set either, then the path will default to /var/lib/lxd/unix.socket.
+// If the path argument is empty, then $LXD_SOCKET will be used, if
+// unset $LXD_DIR/unix.socket will be used and if that one isn't set
+// either, then the path will default to /var/lib/lxd/unix.socket.
 func ConnectLXDUnix(path string, args *ConnectionArgs) (ContainerServer, error) {
 	logger.Debugf("Connecting to a local LXD over a Unix socket")
 
@@ -84,12 +85,15 @@ func ConnectLXDUnix(path string, args *ConnectionArgs) (ContainerServer, error)
 
 	// Determine the socket path
 	if path == "" {
-		lxdDir := os.Getenv("LXD_DIR")
-		if lxdDir == "" {
-			lxdDir = "/var/lib/lxd"
+		path = os.Getenv("LXD_SOCKET")
+		if path == "" {
+			lxdDir := os.Getenv("LXD_DIR")
+			if lxdDir == "" {
+				lxdDir = "/var/lib/lxd"
+			}
+
+			path = filepath.Join(lxdDir, "unix.socket")
 		}
-
-		path = filepath.Join(lxdDir, "unix.socket")
 	}
 
 	// Setup the HTTP client
diff --git a/lxd/daemon.go b/lxd/daemon.go
index 4328953d..a045bb33 100644
--- a/lxd/daemon.go
+++ b/lxd/daemon.go
@@ -216,6 +216,11 @@ func (d *Daemon) State() *state.State {
 // UnixSocket returns the full path to the unix.socket file that this daemon is
 // listening on. Used by tests.
 func (d *Daemon) UnixSocket() string {
+	path := os.Getenv("LXD_SOCKET")
+	if path != "" {
+		return path
+	}
+
 	return filepath.Join(d.os.VarDir, "unix.socket")
 }
 
@@ -443,6 +448,7 @@ func (d *Daemon) init() error {
 	/* Setup the web server */
 	config := &endpoints.Config{
 		Dir:                  d.os.VarDir,
+		UnixSocket:           d.UnixSocket(),
 		Cert:                 certInfo,
 		RestServer:           RestServer(d),
 		DevLxdServer:         DevLxdServer(d),
diff --git a/lxd/endpoints/endpoints.go b/lxd/endpoints/endpoints.go
index 75894398..4b419267 100644
--- a/lxd/endpoints/endpoints.go
+++ b/lxd/endpoints/endpoints.go
@@ -19,6 +19,9 @@ type Config struct {
 	// The LXD var directory to create Unix sockets in.
 	Dir string
 
+	// UnixSocket is the path to the Unix socket to bind
+	UnixSocket string
+
 	// HTTP server handling requests for the LXD RESTful API.
 	RestServer *http.Server
 
@@ -87,6 +90,9 @@ func Up(config *Config) (*Endpoints, error) {
 	if config.Dir == "" {
 		return nil, fmt.Errorf("no directory configured")
 	}
+	if config.UnixSocket == "" {
+		return nil, fmt.Errorf("no unix socket configured")
+	}
 	if config.RestServer == nil {
 		return nil, fmt.Errorf("no REST server configured")
 	}
@@ -148,7 +154,7 @@ func (e *Endpoints) up(config *Config) error {
 		logger.Infof("LXD isn't socket activated")
 		e.listeners = map[kind]net.Listener{}
 
-		e.listeners[local], err = localCreateListener(config.Dir, config.LocalUnixSocketGroup)
+		e.listeners[local], err = localCreateListener(config.UnixSocket, config.LocalUnixSocketGroup)
 		if err != nil {
 			return fmt.Errorf("local endpoint: %v", err)
 		}
diff --git a/lxd/endpoints/endpoints_test.go b/lxd/endpoints/endpoints_test.go
index 08c8baaa..a51f003e 100644
--- a/lxd/endpoints/endpoints_test.go
+++ b/lxd/endpoints/endpoints_test.go
@@ -33,6 +33,7 @@ func newEndpoints(t *testing.T) (*endpoints.Endpoints, *endpoints.Config, func()
 
 	config := &endpoints.Config{
 		Dir:          dir,
+		UnixSocket:   filepath.Join(dir, "unix.socket"),
 		RestServer:   newServer(),
 		DevLxdServer: newServer(),
 		Cert:         shared.TestingKeyPair(),
diff --git a/lxd/endpoints/local.go b/lxd/endpoints/local.go
index c91db701..59ef1edf 100644
--- a/lxd/endpoints/local.go
+++ b/lxd/endpoints/local.go
@@ -2,13 +2,10 @@ package endpoints
 
 import (
 	"net"
-	"path/filepath"
 )
 
 // Create a new net.Listener bound to the unix socket of the local endpoint.
-func localCreateListener(dir string, group string) (net.Listener, error) {
-	path := filepath.Join(dir, "unix.socket")
-
+func localCreateListener(path string, group string) (net.Listener, error) {
 	err := CheckAlreadyRunning(path)
 	if err != nil {
 		return nil, err
diff --git a/lxd/endpoints/local_test.go b/lxd/endpoints/local_test.go
index e409734e..a0ce2d2f 100644
--- a/lxd/endpoints/local_test.go
+++ b/lxd/endpoints/local_test.go
@@ -83,6 +83,7 @@ func TestEndpoints_LocalAlreadyRunning(t *testing.T) {
 
 	endpoints2, config2, cleanup2 := newEndpoints(t)
 	config2.Dir = config1.Dir
+	config2.UnixSocket = config1.UnixSocket
 	defer cleanup2()
 
 	err := endpoints2.Up(config2)
